#lang planet neil/sicp
(define (variable? x) (symbol? x))
(define (same-variable? v1 v2) (and (variable? v1) (variable? v2) (eq? v1 v2)))
(define (sum? x) (and (pair? x) (eq? (cadr x) '+)))
(define (addend s) (car s))
(define (augend s) (if (null? (cdddr s)) (caddr s) (cons (caddr s) (cons '+ (cdddr s)))))
(define (product? x) (and (pair? x) (eq? (cadr x) '*)))
(define (mutiplier s) (car s))
(define (mutiplicand s) (if (null? (cdddr s)) (caddr s) (cons (caddr s) (cons '* (cdddr s)))))

(define (=number? a v) (and (number? a) (= a v)))
; (define (make-sum a1 a2) (list '+ a1 a2))
; (define (make-product a1 a2) (list '* a1 a2))
(define (make-sum a1 a2)
  (cond ((=number? a1 0) a2)
        ((=number? a2 0) a1)
        ((and (number? a1) (number? a2)) (+ a1 a2))
        (else (list '+ a1 a2))))
(define (make-product a1 a2)
  (cond ((or (=number? a1 0) (=number? a2 0)) 0)
        ((=number? a1 1) a2)
        ((=number? a2 1) a1)
        ((and (number? a1) (number? a2)) (* a1 a2))
        (else (list '* a1 a2))))

(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp)
         (if (same-variable? exp var) 1 0))
        ((sum? exp)
         (make-sum (deriv (addend exp) var)
                   (deriv (augend exp) var)))
        ((product? exp)
         (make-sum
          (make-product (mutiplier exp)
                        (deriv (mutiplicand exp) var))
          (make-product (deriv (mutiplier exp) var)
                        (mutiplicand exp))))
        (else
         (error "unknown" exp))))

(display (deriv '(x + (3 * (x + (y + 2)))) 'x))
(newline)
(display (deriv '(x + 3 * (x + y + 2)) 'x))
(newline)
(display (deriv '(x + (3 * (x + (y * (x + 2))))) 'x))
(newline)


