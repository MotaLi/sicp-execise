#lang scheme
(require (planet "sicp.ss" ("soegaard" "sicp.plt" 2 1)))
(define nil '())

(define one 0.99)
(define origin (make-vect 0 0))
(define lower-right (make-vect one 0))
(define upper-left (make-vect 0 one))
(define upper-right (make-vect one one))
(define (scale-vect s v)
  (make-vect (* s (vector-xcor v)) (* s (vector-ycor v))))

(define (paint-segs l)
  (paint (segments->painter l)))



(define (connect vs)
  (define (aux result remain)
    (if (null? (cdr remain))
        (reverse result)
        (aux (cons (make-segment (car remain) (cadr remain)) result) (cdr remain))))
  (aux nil vs))

(define la (connect (list origin upper-left upper-right lower-right origin)))
(define lb (append (connect (list origin upper-right))
                   (connect (list upper-left lower-right))))
(define lc (connect (list (make-vect 0 .5)
                          (make-vect .5 1)
                          (make-vect 1 .5)
                          (make-vect .5 0)
                          (make-vect 0 .5))))
(define v make-vect)
(define ld (append (connect (list (v 0 .8)
                            (v .2 .6)
                            (v .3 .7)
                            (v .45 .75)
                            (v .4 .85)
                            (v .45 1)))
                   (connect (list (v .6 1)
                            (v .65 .85)
                            (v .6 .75)
                            (v .75 .7)
                            (v 1 .45)))
                   (connect (list (v 0 .5)
                            (v .2 .4)
                            (v .35 .6)
                            (v .4 .45)
                            (v .2 0)))
                   (connect (list (v .4 0)
                            (v .5 .25)
                            (v .55 0)))
                   (connect (list (v .7 0)
                            (v .6 .5)
                            (v 1 .25)))))
(paint-segs la)
(paint-segs lb)
(paint-segs lc)
(paint-segs ld)



